# This file contains pin mappings for the Creality "v4.2.7" board. To
# use this config, during "make menuconfig" select the STM32F103 with
# a "28KiB bootloader" and serial (on USART1 PA10/PA9) communication.

# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.
# See docs/Config_Reference.md for a description of parameters.

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[display] # RET6 12864 LCD
lcd_type: st7920
cs_pin: PB12
sclk_pin: PB13
sid_pin: PB15
encoder_pins: ^PB14, ^PB10
click_pin: ^!PB2

[stepper_x]
step_pin: PB9
dir_pin: PC2
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA5
position_endstop: 0
position_max: 260
position_min: 0
homing_speed: 75

[stepper_y]
step_pin: PB7
dir_pin: PB8
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA6
position_endstop: 0
position_max: 242
position_min: 0
homing_speed: 75

[stepper_z]
step_pin: PB5
dir_pin: !PB6
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
#position_endstop: 0.0
position_min: -3
position_max: 250

[bltouch]
sensor_pin: ^PB1
control_pin: PB0
pin_up_touch_mode_reports_triggered: True
probe_with_touch_mode: True
x_offset: -45.3
y_offset: -9.4
#z_offset: 2.10
speed: 10
samples: 3
sample_retract_dist: 5.0              # Can be set lower, example 2.5 depending on height of bltouch from bed
lift_speed: 40
samples_tolerance_retries: 3

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 30,46
mesh_max: 200,216
probe_count: 3,3
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

[screws_tilt_adjust]
screw1: 80,56
screw1_name: front left screw
screw2: 250,56
screw2_name: front right screw
screw3: 250,226
screw3_name: rear right screw
screw4: 80,226
screw4_name: rear left screw
horizontal_move_z: 10
speed: 50
screw_thread: CW-M4

[safe_z_home]
home_xy_position: 118,134 # Change coordinates to the center of your print bed
z_hop: 10 # Move up 10mm
z_hop_speed: 5

[extruder]
max_extrude_only_distance: 100.0
pressure_advance: 0.08
#max_extrude_cross_section: 1.0 # default 0.640
step_pin: PB3
dir_pin: PB4
enable_pin: !PC3
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 22.848
#rotation_distance: 24.61538
#rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: Generic 3950
sensor_pin: PC5
#control = pid
#pid_kp = 20.172
#pid_ki = 0.857
#pid_kd = 118.765
min_temp: 0
max_temp: 250

[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control = pid
#pid_kp = 74.155
#pid_ki = 1.909
#pid_kd = 720.233
min_temp: 0
max_temp: 130

[skew_correction]

[fan]
pin: PA0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[board_pins]
aliases:
  EXP1_1=PC6,EXP1_3=PB10,EXP1_5=PB14,EXP1_7=PB12,EXP1_9=<GND>,
  EXP1_2=PB2,EXP1_4=PB11,EXP1_6=PB13,EXP1_8=PB15,EXP1_10=<5V>,
  PROBE_IN=PB0,PROBE_OUT=PB1,FIL_RUNOUT=PC6

[respond]
default_type: command
[pause_resume] 
recover_velocity: 50

[gcode_macro M0]
gcode:
  CHECK_KM_CONFIG # Need this in case startup errors were missed.

  CLEAR_PAUSE
  {% set BED = params.BED|default(params.BED_TEMP)|float %}
  {% set EXTRUDER = params.EXTRUDER|default(params.EXTRUDER_TEMP)|float %}
  {% set CHAMBER = params.CHAMBER|default(0)|float
                   if "chamber" in printer.heaters.available_heaters else 0.0 %}
  {% set settings = printer["gcode_macro print_start_set"].settings %}
  {% set MESH_MIN = params.MESH_MIN|default(settings.MESH_MIN)|default(None) %}
  {% set MESH_MAX = params.MESH_MAX|default(settings.MESH_MAX)|default(None) %}
  {% set LAYERS = params.LAYERS|default(settings.LAYERS)|default(0)|int %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(settings.NOZZLE_SIZE)|
         default(printer.configfile.settings.extruder.nozzle_diameter)|float %}
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set actions_at_temp = km.start_level_bed_at_temp or
                           km.start_quad_gantry_level_at_temp or
                           km.start_z_tilt_adjust_at_temp %}
  # The bed started at no more than 0.2C below and 1.0C above the target temp.
  {% set bed_at_target = (BED + 0.4 - printer.heater_bed.temperature) |
                           abs <= 0.6 %}
  {% set bed_overshoot = (BED + (km.start_bed_heat_overshoot if
             (BED and not bed_at_target) else 0.0),
           printer.configfile.settings.heater_bed.max_temp ) | min %}

  INIT_LAYER_GCODE LAYERS="{LAYERS}"
  {% if CHAMBER > 0.0 %}
    M141 S{CHAMBER}
  {% endif %}
  # Start bed heating
  M140 S{bed_overshoot}
  {% if actions_at_temp %}
    # If we're going to run a bed level we heat the extruder only part way to
    # avoid oozing all over the bed while probing.
    M104 S{(km.start_extruder_preheat_scale * EXTRUDER)|round(0,'ceil')|int}
  {% else %}
    M104 S{EXTRUDER}
  {% endif %}
  # home all axes
  G28
  G90
  # Skip this if the bed was already at target when START_PRINT was called.
  {% if BED > 0.0 and not bed_at_target %}
    PARK
    # Overshoot the target a bit.
    M190 S{bed_overshoot}
    G4 P{km.start_bed_heat_delay / 2}
    M190 R{BED} # Settle down after the overshoot.
    G4 P{km.start_bed_heat_delay / 2}
  {% endif %}

  {% if CHAMBER > 0.0 %}
    _KM_PARK_IF_NEEDED HEATER="chamber" RANGE=ABOVE
    M191 S{CHAMBER}
  {% endif %}

  {% if BED > 0.0 and bed_at_target%}
    M190 R{BED} # Extra bed stabilization if we skipped it earlier.
  {% endif %}

  {% if actions_at_temp %}
    {% if km.start_extruder_set_target_before_level %}
      M104 S{EXTRUDER} # set the final extruder target temperature
    {% endif %}
    {% if km.start_home_z_at_temp and not bed_at_target %}
      G28 Z # Re-home only the Z axis now that the bed has stabilized.
    {% endif %}
    {% if km.start_z_tilt_adjust_at_temp %}
      Z_TILT_ADJUST
    {% endif %}
    {% if km.start_quad_gantry_level_at_temp %}
      QUAD_GANTRY_LEVEL
    {% endif %}
    {% if km.start_level_bed_at_temp %}
      BED_MESH_CALIBRATE_FAST{% if MESH_MIN %} MESH_MIN={MESH_MIN}{% endif
                           %}{% if MESH_MAX %} MESH_MAX={MESH_MAX}{% endif %}
    {% endif %}
    {% if not km.start_extruder_set_target_before_level %}
      M104 S{EXTRUDER} # set the final extruder target temperature
    {% endif %}
    G4
  {% endif %}
  # Wait for extruder to reach temperature
  _KM_PARK_IF_NEEDED HEATER={printer.toolhead.extruder} RANGE=ABOVE
  M109 S{EXTRUDER}
  # apply Z offset for bed surface (just in case it was reset).
  _APPLY_BED_SURFACE_OFFSET
  {% if km.start_gcode_before_print %}{ km.start_gcode_before_print }{% endif %}
  {% if km.start_purge_length > 0.0 %}
    DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
                    }"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
                    %}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
  {% endif %}

[gcode_macro _km_park_if_needed]
description: Parks the extruder if the current temperature of the supplied
  heater is not within the specified target range.
  Usage: _KM_PARK_IF_NEEDED HEATER=<heater> RANGE=[<percentage>|ABOVE|BELOW]
gcode:
  # This needs to get called as its own macro to get the current temp evaluated.
  {% set HEATER = params.HEATER %}
  {% set RANGE = (params.RANGE|default(1))|string|upper %}

  {% if printer[HEATER].target %}
    {% if RANGE == "ABOVE" %}
      {% if printer[HEATER].temperature < printer[HEATER].target %}
        PARK
      {% endif %}
    {% elif RANGE == "BELOW" %}
      {% if printer[HEATER].temperature > printer[HEATER].target %}
        PARK
      {% endif %}
    {% elif (printer[HEATER].temperature - printer[HEATER].target)|abs >
             (printer[HEATER].target * RANGE|float * 0.01)|abs %}
      PARK
    {% endif %}
  {% endif %}

[gcode_macro print_start_set]
description: Inserted by slicer to set values used by PRINT_START.
  Usage: PRINT_START_SET <VARIABLE>=<value>
variable_settings: {}
gcode:
  {%for k in params %}
    {% set dummy = settings.__setitem__(k|upper, params[k]) %}
  {% endfor %}

# The sections below here are required for the macros to work. If your config
# already has some of these sections you should merge the duplicates into one
# (or if they are identical just remove one of them).
[idle_timeout]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set toolhead = printer.toolhead %}
  {% set max_x = km.print_max[0] %}
  {% set max_y = km.print_max[1] %}
  {% set max_z = toolhead.axis_maximum.z %}
  {% set x_safe = (max_x - toolhead.position.x, 2.0)|min %}
  {% set y_safe = (max_y - toolhead.position.y, 2.0)|min %}
  {% set z_safe = (max_z - toolhead.position.z, 2.0)|min %}

  # Wipe if we're not cancelling a paused print.
  {% if not printer.pause_resume.is_paused %}
    G91
    G0 Z{z_safe} E-1.0 F{km.travel_speed_z * 2} ; move nozzle up
    G0 X{x_safe} Y{y_safe} E-1.0 F{km.travel_speed_xy} ; remove stringing
  {% endif %}

  # Small retract to prevent ooze
  G92 E0
  G1 E-5.0 F3600
  M400

  {% if km.start_clear_adjustments_at_end != 0 %}
    RESET_HEATER_SCALING
    RESET_FAN_SCALING
    M220 S100
    M221 S100
  {% endif %}
  _RESET_LAYER_GCODE
  _RESET_VELOCITY_LIMITS
  TURN_OFF_HEATERS
  M107; turn off fan
  # Park the toolhead and present the bed
  PARK Y="{km.start_end_park_y}"
  M84 ; disable steppers
  CLEAR_PAUSE
